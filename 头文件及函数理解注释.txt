#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <termios.h>   
#define SIZE    16
#define UP      0x77   // 小写 w
#define UP_B    0x57   // 大写W
#define DOWN    0x73  // 小写s
#define DOWN_B  0x53  // 大写 S
#define RIGHT   0x64   // 小写 d
#define RIGHT_B 0x44   // 大写 D
#define LEFT    0x41  // 小写 A
#define LEFT_B  0x61   // 大写 a
 
int arr[SIZE] = {0};
int is_move = 0;       // 这个标志是判断是否有移动过没有
int is_merge = 0;      // 这个标志是判断是否有合并过没有
int max;               // 当前最大数字
int total;             // 统计总分数
 
 
static struct termios oldt;
 
void restore_terminal_settings(void)
{
    tcsetattr(0, TCSANOW, &oldt);
}
 
void disable_terminal_return(void)
{
    struct termios newt;
    tcgetattr(0, &oldt);
    newt = oldt;
    newt.c_lflag &= ~(ICANON | ECHO);
    tcsetattr(0, TCSANOW, &newt);
    atexit(restore_terminal_settings);
}
//初始化数组，产生两个不同的随机数，从0-15产生，对应数组下标，然后把该下标数组的值设置为2
void init(void)
{
    int i, random1, random2;
    random1 = rand() % SIZE;
    for(i = 0; i < 1; i++)
    {
        random2 = rand() % SIZE;
        if(random1 == random2)
        {
            i--;
        }
    }
    arr[random1] = 2;
    arr[random2] = 2;
}
 
//判断是否不能移动并且合并，就是game over了
int is_dead()
{
    int i, j;
    for(i = 0; i < SIZE; i++)
    {
        if(!arr[i])  //如果数组当中还有0，说明还能移动，返回0，说明游戏还没结束呢
        {
            return 0;
        }
    }
//到这里说明，的确在一个方向不能移动了，但是，有可能换个方向还可以移动，所以能到这里说明，16个格子全部有数字，都不为0，接下来判断4行，4列
//每相邻两个数字,是否有相同的如果有说明通过移动还可以动，这时候还没死呢
    for(i = 0; i < SIZE; i += 4)
    {
        for(j = i; j < i + 3; j++)
        {
            if(arr[j] == arr[j + 1])  //这里就是判断4行，一行一行看，每相邻两个格子如果数字有相同的，return 0，说明游戏还可以继续
            {
                return 0;
            }
        }
    }
    for(i = 0; i < 4; i++)
    {
        for(j = i; j < i + 12; j += 4)
        {
            if(arr[j] == arr[j + 4])  //这里判断4列，一列一列看，每相邻两个格子如果有数字相同的，return 0，说明游戏还可以继续
            {
                return 0;
            }
        }
    }
    return 1;    // 能到这里，说明16个格子全部都有数字，都不为0，而且各个方向无论怎么移动都不能合并，那么游戏结束game over，return 1
}
 
//  这个函数返回当前最大的数字 
int max_num(void)
{
    int i;
    static int count = 0;
    for(i = 0; i < SIZE; i++)
    {
        if(arr[i] > max)
        {
            max = arr[i];  //找最大数
        }
    }
    if(!count && 2048 == max)  //判断如果最大数==2048，过关，按任意键继续玩
    {
        count++;
        printf("恭喜过关，请按任意键继续！");
        getchar();
    }
    return max;
}
 
//这个函数，负责每次打印图形，每次移动操作都会修改数组，改一次，打印一次
void print_game(void)
{
    system("clear");
    int i;
    printf("按【W】向上移动\n按【S】向下移动\n按【A】向左移动\n按【D】向右移动\n按【Ctrl + Z】退出游戏\n最大的数是：%d\n总分是：%d\n", max_num(), total);
    printf("\n");
    printf("+-------------  mini02048  --------------+\n");
    printf("+-----------------------------------+\n");
    printf("|        |        |        |        |\n");
    for(i = 0; i < SIZE; i++)
    {
        if(0 == i || 4 == i || 8 == i || 12 == i)
        {
            printf("|");
        }
        printf(0 == arr[i] ? "%9c|" : "%8d|", arr[i]);  //这里有个对数组中数字0的处理，如果是0 ， 那么按%c格式打印是空白，好看些
        if(3 == i || 7 == i || 11 == i)
        {
            printf("\n");
            printf("|--------+--------+--------+--------|\n");
            printf("|        |        |        |        |\n");
        }
    }
    printf("\n");
    printf("+-----------------------------------+\n");
    printf("+------------ by 301 -----------+\n");
    printf("\n\n\n");
    if(is_dead()) //如果能进这个if，说明game over，然后按任意键重新玩，
    {
        int i;
        printf("game over!\n");
        printf("请按任意键重新开始！\n");
        getchar();
        for(i = 0; i < SIZE; i++)   //数组清0
        {
            arr[i] = 0;
        }
        init();  //重新初始化
        print_game();
    }
}
 
//这个函数是每次移动这个动作完成时，在剩下的格子中产生一个随机数字，对应数组下标，然后把该下标数组值设置为2，即每次移动完在剩下空白的地方出现一个2